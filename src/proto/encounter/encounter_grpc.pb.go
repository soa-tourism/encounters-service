// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc2
// source: encounter.proto

package encounter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EncounterClient is the client API for Encounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncounterClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*EncounterDto, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*EncounterDto, error)
	Delete(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetById(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*EncounterDto, error)
	CreateEncounterExecution(ctx context.Context, in *EncounterExecutionDto, opts ...grpc.CallOption) (*EncounterExecutionDto, error)
	GetEncounterById(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*EncounterDto, error)
	UpdateEncounterExecution(ctx context.Context, in *EncounterExecutionDto, opts ...grpc.CallOption) (*EncounterExecutionDto, error)
	ActivateEncounterExecution(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*EncounterExecutionDto, error)
	CompleteExecution(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*EncounterExecutionDto, error)
	DeleteExecution(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllExecutionsByTourist(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*PagedExecutions, error)
	GetAllCompletedExecutionsByTourist(ctx context.Context, in *PagedRequestWithId, opts ...grpc.CallOption) (*PagedExecutions, error)
}

type encounterClient struct {
	cc grpc.ClientConnInterface
}

func NewEncounterClient(cc grpc.ClientConnInterface) EncounterClient {
	return &encounterClient{cc}
}

func (c *encounterClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*EncounterDto, error) {
	out := new(EncounterDto)
	err := c.cc.Invoke(ctx, "/Encounter/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*EncounterDto, error) {
	out := new(EncounterDto)
	err := c.cc.Invoke(ctx, "/Encounter/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) Delete(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Encounter/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) GetById(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*EncounterDto, error) {
	out := new(EncounterDto)
	err := c.cc.Invoke(ctx, "/Encounter/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) CreateEncounterExecution(ctx context.Context, in *EncounterExecutionDto, opts ...grpc.CallOption) (*EncounterExecutionDto, error) {
	out := new(EncounterExecutionDto)
	err := c.cc.Invoke(ctx, "/Encounter/CreateEncounterExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) GetEncounterById(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*EncounterDto, error) {
	out := new(EncounterDto)
	err := c.cc.Invoke(ctx, "/Encounter/GetEncounterById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) UpdateEncounterExecution(ctx context.Context, in *EncounterExecutionDto, opts ...grpc.CallOption) (*EncounterExecutionDto, error) {
	out := new(EncounterExecutionDto)
	err := c.cc.Invoke(ctx, "/Encounter/UpdateEncounterExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) ActivateEncounterExecution(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*EncounterExecutionDto, error) {
	out := new(EncounterExecutionDto)
	err := c.cc.Invoke(ctx, "/Encounter/ActivateEncounterExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) CompleteExecution(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*EncounterExecutionDto, error) {
	out := new(EncounterExecutionDto)
	err := c.cc.Invoke(ctx, "/Encounter/CompleteExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) DeleteExecution(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Encounter/DeleteExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) GetAllExecutionsByTourist(ctx context.Context, in *EncounterId, opts ...grpc.CallOption) (*PagedExecutions, error) {
	out := new(PagedExecutions)
	err := c.cc.Invoke(ctx, "/Encounter/GetAllExecutionsByTourist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterClient) GetAllCompletedExecutionsByTourist(ctx context.Context, in *PagedRequestWithId, opts ...grpc.CallOption) (*PagedExecutions, error) {
	out := new(PagedExecutions)
	err := c.cc.Invoke(ctx, "/Encounter/GetAllCompletedExecutionsByTourist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncounterServer is the server API for Encounter service.
// All implementations must embed UnimplementedEncounterServer
// for forward compatibility
type EncounterServer interface {
	Create(context.Context, *CreateRequest) (*EncounterDto, error)
	Update(context.Context, *UpdateRequest) (*EncounterDto, error)
	Delete(context.Context, *EncounterId) (*emptypb.Empty, error)
	GetById(context.Context, *EncounterId) (*EncounterDto, error)
	CreateEncounterExecution(context.Context, *EncounterExecutionDto) (*EncounterExecutionDto, error)
	GetEncounterById(context.Context, *EncounterId) (*EncounterDto, error)
	UpdateEncounterExecution(context.Context, *EncounterExecutionDto) (*EncounterExecutionDto, error)
	ActivateEncounterExecution(context.Context, *ActivateRequest) (*EncounterExecutionDto, error)
	CompleteExecution(context.Context, *ActivateRequest) (*EncounterExecutionDto, error)
	DeleteExecution(context.Context, *EncounterId) (*emptypb.Empty, error)
	GetAllExecutionsByTourist(context.Context, *EncounterId) (*PagedExecutions, error)
	GetAllCompletedExecutionsByTourist(context.Context, *PagedRequestWithId) (*PagedExecutions, error)
	mustEmbedUnimplementedEncounterServer()
}

// UnimplementedEncounterServer must be embedded to have forward compatible implementations.
type UnimplementedEncounterServer struct {
}

func (UnimplementedEncounterServer) Create(context.Context, *CreateRequest) (*EncounterDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEncounterServer) Update(context.Context, *UpdateRequest) (*EncounterDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEncounterServer) Delete(context.Context, *EncounterId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEncounterServer) GetById(context.Context, *EncounterId) (*EncounterDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEncounterServer) CreateEncounterExecution(context.Context, *EncounterExecutionDto) (*EncounterExecutionDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncounterExecution not implemented")
}
func (UnimplementedEncounterServer) GetEncounterById(context.Context, *EncounterId) (*EncounterDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncounterById not implemented")
}
func (UnimplementedEncounterServer) UpdateEncounterExecution(context.Context, *EncounterExecutionDto) (*EncounterExecutionDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEncounterExecution not implemented")
}
func (UnimplementedEncounterServer) ActivateEncounterExecution(context.Context, *ActivateRequest) (*EncounterExecutionDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateEncounterExecution not implemented")
}
func (UnimplementedEncounterServer) CompleteExecution(context.Context, *ActivateRequest) (*EncounterExecutionDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteExecution not implemented")
}
func (UnimplementedEncounterServer) DeleteExecution(context.Context, *EncounterId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExecution not implemented")
}
func (UnimplementedEncounterServer) GetAllExecutionsByTourist(context.Context, *EncounterId) (*PagedExecutions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExecutionsByTourist not implemented")
}
func (UnimplementedEncounterServer) GetAllCompletedExecutionsByTourist(context.Context, *PagedRequestWithId) (*PagedExecutions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCompletedExecutionsByTourist not implemented")
}
func (UnimplementedEncounterServer) mustEmbedUnimplementedEncounterServer() {}

// UnsafeEncounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncounterServer will
// result in compilation errors.
type UnsafeEncounterServer interface {
	mustEmbedUnimplementedEncounterServer()
}

func RegisterEncounterServer(s grpc.ServiceRegistrar, srv EncounterServer) {
	s.RegisterService(&Encounter_ServiceDesc, srv)
}

func _Encounter_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).Delete(ctx, req.(*EncounterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).GetById(ctx, req.(*EncounterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_CreateEncounterExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterExecutionDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).CreateEncounterExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/CreateEncounterExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).CreateEncounterExecution(ctx, req.(*EncounterExecutionDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_GetEncounterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).GetEncounterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/GetEncounterById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).GetEncounterById(ctx, req.(*EncounterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_UpdateEncounterExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterExecutionDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).UpdateEncounterExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/UpdateEncounterExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).UpdateEncounterExecution(ctx, req.(*EncounterExecutionDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_ActivateEncounterExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).ActivateEncounterExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/ActivateEncounterExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).ActivateEncounterExecution(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_CompleteExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).CompleteExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/CompleteExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).CompleteExecution(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_DeleteExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).DeleteExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/DeleteExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).DeleteExecution(ctx, req.(*EncounterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_GetAllExecutionsByTourist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).GetAllExecutionsByTourist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/GetAllExecutionsByTourist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).GetAllExecutionsByTourist(ctx, req.(*EncounterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounter_GetAllCompletedExecutionsByTourist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagedRequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServer).GetAllCompletedExecutionsByTourist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Encounter/GetAllCompletedExecutionsByTourist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServer).GetAllCompletedExecutionsByTourist(ctx, req.(*PagedRequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

// Encounter_ServiceDesc is the grpc.ServiceDesc for Encounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Encounter",
	HandlerType: (*EncounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Encounter_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Encounter_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Encounter_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Encounter_GetById_Handler,
		},
		{
			MethodName: "CreateEncounterExecution",
			Handler:    _Encounter_CreateEncounterExecution_Handler,
		},
		{
			MethodName: "GetEncounterById",
			Handler:    _Encounter_GetEncounterById_Handler,
		},
		{
			MethodName: "UpdateEncounterExecution",
			Handler:    _Encounter_UpdateEncounterExecution_Handler,
		},
		{
			MethodName: "ActivateEncounterExecution",
			Handler:    _Encounter_ActivateEncounterExecution_Handler,
		},
		{
			MethodName: "CompleteExecution",
			Handler:    _Encounter_CompleteExecution_Handler,
		},
		{
			MethodName: "DeleteExecution",
			Handler:    _Encounter_DeleteExecution_Handler,
		},
		{
			MethodName: "GetAllExecutionsByTourist",
			Handler:    _Encounter_GetAllExecutionsByTourist_Handler,
		},
		{
			MethodName: "GetAllCompletedExecutionsByTourist",
			Handler:    _Encounter_GetAllCompletedExecutionsByTourist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encounter.proto",
}
